# colors
set-option -sa terminal-overrides ",xterm*:Tc"

# Note: prefix, mouse, and escape-time are managed by home-manager

bind '|' split-window -h # Split panes horizontal
bind '-' split-window -v # Split panes vertically


# When splitting panes, maintain the current path
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# Hook to capture SSH sessions
set-hook -g after-split-window 'if-shell "ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"^[^TXZ ]+ +(\\S+\\/)?ssh$\"" "send-keys \"$(ps -t #{pane_tty} -o command= | grep ssh)\" Enter"'

# Start window and panes index at 1 not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on



# Note: plugins are now managed by home-manager

# Custom theme (Rose Pine-inspired colors)
# Base colors from Rose Pine theme
# base      #191724
# surface   #1f1d2e
# overlay   #26233a
# muted     #6e6a86
# subtle    #908caa
# text      #e0def4
# love      #eb6f92
# gold      #f6c177
# rose      #ebbcba
# pine      #31748f
# foam      #9ccfd8
# iris      #c4a7e7
# highlight_low  #21202e
# highlight_med  #403d52
# highlight_high #524f67

# Custom window format to show running command
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{pane_current_command}'

# Define a clean, minimal status line with Rose Pine colors
set -g status on
set -g status-style "bg=default"

# Remove all window styling
set -g window-status-style "bg=default"
set -g window-status-current-style "bg=default"

# Window status format (tabs) - super minimal with no highlighting
set -g window-status-current-format "#[fg=#f6c177,bold]#I #[fg=#ebbcba,bold]#W"
set -g window-status-format "#[fg=#6e6a86,nobold]#I #[fg=#908caa,nobold]#W"
set -g window-status-separator "   "

# Center the window list
set -g status-justify centre

# Empty left status
set -g status-left ""
set -g status-left-length 0

# Show only time in right status
set -g status-right "#[fg=#ebbcba,bg=default]%H:%M "
set -g status-right-length 10


# Smart pane switching with awareness of Vim splits
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'
bind-key -n 'C-\' if-shell "$is_vim" 'send-keys C-\' 'select-pane -l'

# Restore clear screen functionality with prefix + C-l
bind C-l send-keys 'C-l'

# Load plugins from the Nix store
if-shell "[ -d /nix/store ]" {
  # Dynamically find the plugin paths in the Nix store
  run-shell "tmux source-file <(find /nix/store -path '*tmux-plugins/sensible*sensible.tmux' | head -1)"
  run-shell "tmux source-file <(find /nix/store -path '*tmux-plugins/vim-tmux-navigator*vim-tmux-navigator.tmux' | head -1)"
  run-shell "tmux source-file <(find /nix/store -path '*tmux-plugins/resurrect*resurrect.tmux' | head -1)"
  run-shell "tmux source-file <(find /nix/store -path '*tmux-plugins/yank*yank.tmux' | head -1)"
}

# Plugin usage:
# resurrect: prefix + Ctrl-s to save, prefix + Ctrl-r to restore
# sensible: provides sensible defaults
# yank: y in copy mode to copy to clipboard
# vim-tmux-navigator: Ctrl-h/j/k/l to navigate between panes and vim splits
